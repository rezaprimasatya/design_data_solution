/*
  DIRECT model revision 21
  Generated from SQL DBM (www.sqldbm.com)
*/

DROP TABLE IF EXISTS [omd].[SOURCE_CONTROL];
GO


DROP TABLE IF EXISTS [omd].[EVENT_LOG];
GO


DROP TABLE IF EXISTS [omd].[MODULE_PARAMETER];
GO


DROP TABLE IF EXISTS [omd].[MODULE_INSTANCE];
GO


DROP TABLE IF EXISTS [omd].[BATCH_MODULE];
GO


DROP TABLE IF EXISTS [omd].[MODULE];
GO


DROP TABLE IF EXISTS [omd].[BATCH_INSTANCE];
GO


DROP TABLE IF EXISTS [omd].[AREA];
GO


DROP TABLE IF EXISTS [omd].[PROCESSING_INDICATOR];
GO


DROP TABLE IF EXISTS [omd].[PARAMETER];
GO


DROP TABLE IF EXISTS [omd].[NEXT_RUN_INDICATOR];
GO


DROP TABLE IF EXISTS [omd].[LAYER];
GO


DROP TABLE IF EXISTS [omd].[EXECUTION_STATUS];
GO


DROP TABLE IF EXISTS [omd].[EVENT_TYPE];
GO


DROP TABLE IF EXISTS [omd].[BATCH];
GO

DROP SCHEMA IF EXISTS [omd];
GO


IF NOT EXISTS (SELECT * FROM sys.schemas s WHERE s.name='omd')
EXEC ('CREATE SCHEMA [omd]');
GO


EXEC sp_addextendedproperty @name = N'MS_Description', @value = N'Operational Meta Data (omd) schema.', @level0type = N'SCHEMA', @level0name = N'omd';
GO
-- ************************************** [omd].[PROCESSING_INDICATOR]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='PROCESSING_INDICATOR')
CREATE TABLE [omd].[PROCESSING_INDICATOR]
(
 [PROCESSING_INDICATOR]             varchar(1) NOT NULL ,
 [PROCESSING_INDICATOR_DESCRIPTION] varchar(100) NOT NULL ,


 CONSTRAINT [PK_PROCESSING_INDICATOR] PRIMARY KEY CLUSTERED ([PROCESSING_INDICATOR] ASC)
);
GO


-- ************************************** [omd].[PARAMETER]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='PARAMETER')
CREATE TABLE [omd].[PARAMETER]
(
 [PARAMETER_ID]          int IDENTITY (1, 1) NOT NULL ,
 [PARAMETER_DESCRIPTION] varchar(1000) NOT NULL ,
 [PARAMETER_KEY_CODE]    varchar(100) NOT NULL ,
 [PARAMETER_VALUE_CODE]  varchar(100) NOT NULL ,
 [INACTIVE_INDICATOR]    varchar(1) NOT NULL CONSTRAINT [DF_PARAMETER_INACTIVE_INDICATOR] DEFAULT ('N') ,


 CONSTRAINT [PK_PARAMETER] PRIMARY KEY CLUSTERED ([PARAMETER_ID] ASC)
);
GO


-- ************************************** [omd].[NEXT_RUN_INDICATOR]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='NEXT_RUN_INDICATOR')
CREATE TABLE [omd].[NEXT_RUN_INDICATOR]
(
 [NEXT_RUN_INDICATOR]             varchar(1) NOT NULL ,
 [NEXT_RUN_INDICATOR_DESCRIPTION] varchar(100) NOT NULL ,


 CONSTRAINT [PK_NEXT_RUN_INDICATOR] PRIMARY KEY CLUSTERED ([NEXT_RUN_INDICATOR] ASC)
);
GO


-- ************************************** [omd].[LAYER]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='LAYER')
CREATE TABLE [omd].[LAYER]
(
 [LAYER_CODE]        varchar(100) NOT NULL ,
 [LAYER_DESCRIPTION] varchar(1000) NOT NULL ,


 CONSTRAINT [PK_LAYER] PRIMARY KEY CLUSTERED ([LAYER_CODE] ASC)
);
GO



-- ************************************** [omd].[EXECUTION_STATUS]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='EXECUTION_STATUS')
CREATE TABLE [omd].[EXECUTION_STATUS]
(
 [EXECUTION_STATUS_CODE]        varchar(1) NOT NULL ,
 [EXECUTION_STATUS_DESCRIPTION] varchar(1000) NOT NULL ,


 CONSTRAINT [PK_EXECUTION_STATUS] PRIMARY KEY CLUSTERED ([EXECUTION_STATUS_CODE] ASC)
);
GO



-- ************************************** [omd].[EVENT_TYPE]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='EVENT_TYPE')
CREATE TABLE [omd].[EVENT_TYPE]
(
 [EVENT_TYPE_CODE]        varchar(100) NOT NULL ,
 [EVENT_TYPE_DESCRIPTION] varchar(1000) NOT NULL ,


 CONSTRAINT [PK_EVENT_TYPE] PRIMARY KEY CLUSTERED ([EVENT_TYPE_CODE] ASC)
);
GO



-- ************************************** [omd].[BATCH]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='BATCH')
CREATE TABLE [omd].[BATCH]
(
 [BATCH_ID]           int IDENTITY (1, 1) NOT NULL ,
 [BATCH_CODE]         varchar(100) NOT NULL ,
 [BATCH_DESCRIPTION]  varchar(1000) NOT NULL ,
 [FREQUENCY_CODE]     varchar(100) NULL ,
 [INACTIVE_INDICATOR] varchar(1) NOT NULL CONSTRAINT [DF_BATCH_INACTIVE_INDICATOR] DEFAULT ('N') ,


 CONSTRAINT [PK_BATCH] PRIMARY KEY CLUSTERED ([BATCH_ID] ASC),
 CONSTRAINT [IX_BATCH] UNIQUE NONCLUSTERED ([BATCH_CODE] ASC)
);
GO



-- ************************************** [omd].[BATCH_INSTANCE]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='BATCH_INSTANCE')
CREATE TABLE [omd].[BATCH_INSTANCE]
(
 [BATCH_INSTANCE_ID]         int IDENTITY (1, 1) NOT NULL ,
 [BATCH_ID]                  int NOT NULL ,
 [START_DATETIME]            datetime NOT NULL ,
 [END_DATETIME]              datetime NULL ,
 [PROCESSING_INDICATOR]      varchar(1) NOT NULL ,
 [NEXT_RUN_INDICATOR]        varchar(1) NOT NULL ,
 [EXECUTION_STATUS_CODE]     varchar(1) NOT NULL ,
 [BATCH_EXECUTION_SYSTEM_ID] varchar(100) NULL ,


 CONSTRAINT [PK_BATCH_INSTANCE] PRIMARY KEY CLUSTERED ([BATCH_INSTANCE_ID] ASC),
 CONSTRAINT [FK_BATCH_BATCH_INSTANCE] FOREIGN KEY ([BATCH_ID])  REFERENCES [omd].[BATCH]([BATCH_ID]),
 CONSTRAINT [FK_BATCH_INSTANCE_EXECUTION_STATUS] FOREIGN KEY ([EXECUTION_STATUS_CODE])  REFERENCES [omd].[EXECUTION_STATUS]([EXECUTION_STATUS_CODE]),
 CONSTRAINT [FK_BATCH_INSTANCE_NEXT_RUN_INDICATOR] FOREIGN KEY ([NEXT_RUN_INDICATOR])  REFERENCES [omd].[NEXT_RUN_INDICATOR]([NEXT_RUN_INDICATOR]),
 CONSTRAINT [FK_BATCH_INSTANCE_PROCESSING_INDICATOR] FOREIGN KEY ([PROCESSING_INDICATOR])  REFERENCES [omd].[PROCESSING_INDICATOR]([PROCESSING_INDICATOR])
);
GO


CREATE NONCLUSTERED INDEX [FK_BATCH_INSTANCE_BATCH] ON [omd].[BATCH_INSTANCE] 
 (
  [BATCH_ID] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_BATCH_INSTANCE_EXECUTION_STATUS_CODE] ON [omd].[BATCH_INSTANCE] 
 (
  [EXECUTION_STATUS_CODE] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_BATCH_INSTANCE_NEXT_RUN_INDICATOR] ON [omd].[BATCH_INSTANCE] 
 (
  [NEXT_RUN_INDICATOR] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_BATCH_INSTANCE_PROCESSING_INDICATOR] ON [omd].[BATCH_INSTANCE] 
 (
  [PROCESSING_INDICATOR] ASC
 )

GO


-- ************************************** [omd].[AREA]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='AREA')
CREATE TABLE [omd].[AREA]
(
 [AREA_CODE]        varchar(100) NOT NULL ,
 [AREA_DESCRIPTION] varchar(1000) NOT NULL ,
 [LAYER_CODE]       varchar(100) NULL ,


 CONSTRAINT [PK_AREA] PRIMARY KEY CLUSTERED ([AREA_CODE] ASC),
 CONSTRAINT [FK_AREA_LAYER] FOREIGN KEY ([LAYER_CODE])  REFERENCES [omd].[LAYER]([LAYER_CODE])
);
GO


CREATE NONCLUSTERED INDEX [FK_AREA_LAYER] ON [omd].[AREA] 
 (
  [LAYER_CODE] ASC
 )

GO







-- ************************************** [omd].[MODULE]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='MODULE')
CREATE TABLE [omd].[MODULE]
(
 [MODULE_ID]          int IDENTITY (1, 1) NOT NULL ,
 [MODULE_CODE]        varchar(100) NOT NULL ,
 [MODULE_DESCRIPTION] varchar(1000) NOT NULL ,
 [MODULE_TYPE]        varchar(100) NULL ,
 [DATA_OBJECT_SOURCE] varchar(100) NOT NULL ,
 [DATA_OBJECT_TARGET] varchar(100) NOT NULL ,
 [AREA_CODE]          varchar(100) NOT NULL ,
 [FREQUENCY_CODE]     varchar(100) NULL ,
 [INACTIVE_INDICATOR] varchar(1) NOT NULL CONSTRAINT [DF_MODULE_INACTIVE_INDICATOR] DEFAULT ('N') ,


 CONSTRAINT [PK_MODULE] PRIMARY KEY CLUSTERED ([MODULE_ID] ASC),
 CONSTRAINT [IX_MODULE] UNIQUE NONCLUSTERED ([MODULE_CODE] ASC),
 CONSTRAINT [FK_MODULE_AREA] FOREIGN KEY ([AREA_CODE])  REFERENCES [omd].[AREA]([AREA_CODE])
);
GO


CREATE NONCLUSTERED INDEX [FK_MODULE_AREA] ON [omd].[MODULE] 
 (
  [AREA_CODE] ASC
 )

GO







-- ************************************** [omd].[MODULE_PARAMETER]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='MODULE_PARAMETER')
CREATE TABLE [omd].[MODULE_PARAMETER]
(
 [MODULE_ID]          int NOT NULL ,
 [PARAMETER_ID]       int NOT NULL ,
 [INACTIVE_INDICATOR] varchar(1) NOT NULL CONSTRAINT [DF_MODULE_PARAMETER_INACTIVE_INDICATOR] DEFAULT ('N') ,


 CONSTRAINT [PK_MODULE_PARAMETER] PRIMARY KEY CLUSTERED ([MODULE_ID] ASC, [PARAMETER_ID] ASC),
 CONSTRAINT [FK_MODULE_MODULE_PARAMETER] FOREIGN KEY ([PARAMETER_ID])  REFERENCES [omd].[PARAMETER]([PARAMETER_ID]),
 CONSTRAINT [FK_MODULE_PARAMETER] FOREIGN KEY ([MODULE_ID])  REFERENCES [omd].[MODULE]([MODULE_ID])
);
GO


CREATE NONCLUSTERED INDEX [FK_MODULE_PARAMETER_MODULE] ON [omd].[MODULE_PARAMETER] 
 (
  [MODULE_ID] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_MODULE_PARAMETER_PARAMETER] ON [omd].[MODULE_PARAMETER] 
 (
  [PARAMETER_ID] ASC
 )

GO







-- ************************************** [omd].[MODULE_INSTANCE]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='MODULE_INSTANCE')
CREATE TABLE [omd].[MODULE_INSTANCE]
(
 [MODULE_INSTANCE_ID]         int IDENTITY (1, 1) NOT NULL ,
 [MODULE_ID]                  int NOT NULL ,
 [BATCH_INSTANCE_ID]          int NOT NULL ,
 [START_DATETIME]             datetime NOT NULL ,
 [END_DATETIME]               datetime NULL ,
 [PROCESSING_INDICATOR]       varchar(1) NULL ,
 [NEXT_RUN_INDICATOR]         varchar(1) NULL ,
 [EXECUTION_STATUS_CODE]      varchar(1) NOT NULL ,
 [MODULE_EXECUTION_SYSTEM_ID] varchar(100) NULL ,
 [ROWS_INPUT]                 int NULL ,
 [ROWS_INSERTED]              int NULL ,
 [ROWS_UPDATED]               int NULL ,
 [ROWS_DELETED]               int NULL ,
 [ROWS_DISCARDED]             int NULL ,
 [ROWS_REJECTED]              int NULL ,


 CONSTRAINT [PK_MODULE_INSTANCE] PRIMARY KEY CLUSTERED ([MODULE_INSTANCE_ID] ASC),
 CONSTRAINT [FK_MODULE_INSTANCE] FOREIGN KEY ([MODULE_ID])  REFERENCES [omd].[MODULE]([MODULE_ID]),
 CONSTRAINT [FK_MODULE_INSTANCE_BATCH_INSTANCE] FOREIGN KEY ([BATCH_INSTANCE_ID])  REFERENCES [omd].[BATCH_INSTANCE]([BATCH_INSTANCE_ID]),
 CONSTRAINT [FK_MODULE_INSTANCE_EXECUTION_STATUS] FOREIGN KEY ([EXECUTION_STATUS_CODE])  REFERENCES [omd].[EXECUTION_STATUS]([EXECUTION_STATUS_CODE]),
 CONSTRAINT [FK_MODULE_INSTANCE_NEXT_RUN_INDICATOR] FOREIGN KEY ([NEXT_RUN_INDICATOR])  REFERENCES [omd].[NEXT_RUN_INDICATOR]([NEXT_RUN_INDICATOR]),
 CONSTRAINT [FK_MODULE_INSTANCE_PROCESSING_INDICATOR] FOREIGN KEY ([PROCESSING_INDICATOR])  REFERENCES [omd].[PROCESSING_INDICATOR]([PROCESSING_INDICATOR])
);
GO


CREATE NONCLUSTERED INDEX [FK_MODULE_INSTANCE_BATCH_INSTANCE] ON [omd].[MODULE_INSTANCE] 
 (
  [BATCH_INSTANCE_ID] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_MODULE_INSTANCE_EXECUTION_STATUS_CODE] ON [omd].[MODULE_INSTANCE] 
 (
  [EXECUTION_STATUS_CODE] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_MODULE_INSTANCE_MODULE] ON [omd].[MODULE_INSTANCE] 
 (
  [MODULE_ID] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_MODULE_INSTANCE_NEXT_RUN_INDICATOR] ON [omd].[MODULE_INSTANCE] 
 (
  [NEXT_RUN_INDICATOR] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_MODULE_INSTANCE_PROCESSING_INDICATOR] ON [omd].[MODULE_INSTANCE] 
 (
  [PROCESSING_INDICATOR] ASC
 )

GO







-- ************************************** [omd].[BATCH_MODULE]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='BATCH_MODULE')
CREATE TABLE [omd].[BATCH_MODULE]
(
 [BATCH_ID]           int NOT NULL ,
 [MODULE_ID]          int NOT NULL ,
 [INACTIVE_INDICATOR] varchar(1) NOT NULL CONSTRAINT [DF_BATCH_MODULE_INACTIVE_INDICATOR] DEFAULT ('N') ,


 CONSTRAINT [PK_BATCH_MODULE] PRIMARY KEY CLUSTERED ([BATCH_ID] ASC, [MODULE_ID] ASC),
 CONSTRAINT [FK_BATCH_BATCH_MODULE] FOREIGN KEY ([BATCH_ID])  REFERENCES [omd].[BATCH]([BATCH_ID]),
 CONSTRAINT [FK_MODULE_BATCH_MODULE] FOREIGN KEY ([MODULE_ID])  REFERENCES [omd].[MODULE]([MODULE_ID])
);
GO


CREATE NONCLUSTERED INDEX [FK_BATCH_MODULE_BATCH] ON [omd].[BATCH_MODULE] 
 (
  [BATCH_ID] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_BATCH_MODULE_MODULE] ON [omd].[BATCH_MODULE] 
 (
  [MODULE_ID] ASC
 )

GO







-- ************************************** [omd].[SOURCE_CONTROL]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='SOURCE_CONTROL')
CREATE TABLE [omd].[SOURCE_CONTROL]
(
 [MODULE_SOURCE_CONTROL_ID]  int IDENTITY (1, 1) NOT NULL ,
 [MODULE_INSTANCE_ID]        int NOT NULL ,
 [INSERT_DATETIME]           datetime2(7) NULL ,
 [INTERVAL_DATETIME]         datetime2(7) NULL ,
 [INTERVAL_START_DATETIME]   datetime2(7) NULL ,
 [INTERVAL_END_DATETIME]     datetime2(7) NULL ,
 [INTERVAL_START_IDENTIFIER] bigint NULL ,
 [INTERVAL_END_IDENTIFIER]   bigint NULL ,


 CONSTRAINT [PK_SOURCE_CONTROL] PRIMARY KEY CLUSTERED ([MODULE_SOURCE_CONTROL_ID] ASC),
 CONSTRAINT [FK_MODULE_INSTANCE_SOURCE_CONTROL] FOREIGN KEY ([MODULE_INSTANCE_ID])  REFERENCES [omd].[MODULE_INSTANCE]([MODULE_INSTANCE_ID])
);
GO


CREATE NONCLUSTERED INDEX [FK_SOURCE_CONTROL_MODULE_INSTANCE] ON [omd].[SOURCE_CONTROL] 
 (
  [MODULE_INSTANCE_ID] ASC
 )

GO







-- ************************************** [omd].[EVENT_LOG]

IF NOT EXISTS (SELECT * FROM sys.tables t join sys.schemas s ON (t.schema_id = s.schema_id) WHERE s.name='omd' and t.name='EVENT_LOG')
CREATE TABLE [omd].[EVENT_LOG]
(
 [EVENT_ID]                  int IDENTITY (1, 1) NOT NULL ,
 [BATCH_INSTANCE_ID]         int NOT NULL ,
 [MODULE_INSTANCE_ID]        int NOT NULL ,
 [EVENT_TYPE_CODE]           varchar(100) NOT NULL ,
 [EVENT_DATETIME]            datetime NOT NULL ,
 [EVENT_RETURN_CODE_DETAILS] varchar(1000) NOT NULL ,
 [EVENT_DETAIL]              varchar(4000) NOT NULL ,
 [ERROR_BITMAP]              numeric(20,0) NULL ,


 CONSTRAINT [PK_EVENT_LOG] PRIMARY KEY CLUSTERED ([EVENT_ID] ASC),
 CONSTRAINT [FK_BATCH_EVENT] FOREIGN KEY ([BATCH_INSTANCE_ID])  REFERENCES [omd].[BATCH_INSTANCE]([BATCH_INSTANCE_ID]),
 CONSTRAINT [FK_EVENT_LOG_EVENT_TYPE] FOREIGN KEY ([EVENT_TYPE_CODE])  REFERENCES [omd].[EVENT_TYPE]([EVENT_TYPE_CODE]),
 CONSTRAINT [FK_MODULE_INSTANCE_EVENT_LOG] FOREIGN KEY ([MODULE_INSTANCE_ID])  REFERENCES [omd].[MODULE_INSTANCE]([MODULE_INSTANCE_ID])
);
GO


CREATE NONCLUSTERED INDEX [FK_EVENT_LOG_BATCH_INSTANCE] ON [omd].[EVENT_LOG] 
 (
  [BATCH_INSTANCE_ID] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_EVENT_LOG_MODULE_INSTANCE] ON [omd].[EVENT_LOG] 
 (
  [MODULE_INSTANCE_ID] ASC
 )

GO

CREATE NONCLUSTERED INDEX [FK_EVENT_LOG_TYPE] ON [omd].[EVENT_LOG] 
 (
  [EVENT_TYPE_CODE] ASC
 )

GO







