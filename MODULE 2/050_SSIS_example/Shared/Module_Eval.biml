

    <Package Name="Module_Eval" Language="None">
        
      <Annotations>
        <Annotation AnnotationType="Description">Evaluate the processing of a Module Instance.</Annotation>
      </Annotations>
          
      <Variables>
          
        <Variable Name="V_AREA_CODE" DataType="String" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_AREA_CODE">@[$Package::V_AREA_CODE]</Variable>
        <Variable Name="V_BATCH_ID" DataType="Int32" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_BATCH_ID">@[$Package::V_BATCH_ID]</Variable>
        <Variable Name="V_BATCH_INSTANCE_ID" DataType="Int32" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_BATCH_INSTANCE_ID">@[$Package::V_BATCH_INSTANCE_ID]</Variable>
        <Variable Name="V_BATCH_VALIDATION" DataType="String"></Variable>
        <Variable Name="V_INACTIVE_INDICATOR_BATCH_MODULE_LEVEL" DataType="String"></Variable>
        <Variable Name="V_LAST_BATCH_INSTANCE_ID" DataType="Int32">0</Variable>
        <Variable Name="V_LAST_END_DATETIME" DataType="DateTime">1/25/2011 2:39:32 PM</Variable>
        <Variable Name="V_LAST_EXECUTION_STATUS_CODE" DataType="String"></Variable>
        <Variable Name="V_LAST_MODULE_INSTANCE_ID" DataType="Int32">0</Variable>
        <Variable Name="V_LAST_MODULE_INSTANCE_ID_LIST" DataType="String"></Variable>
        <Variable Name="V_LAST_NEXT_RUN_INDICATOR" DataType="String"></Variable>
        <Variable Name="V_LAST_START_DATETIME" DataType="DateTime">1/25/2011 2:39:12 PM</Variable>
        <Variable Name="V_MODULE_ACTIVE_INSTANCE_CONTROL" DataType="String"></Variable>
        <Variable Name="V_MODULE_HISTORY" DataType="Int32">0</Variable>
        <Variable Name="V_MODULE_ID" DataType="Int32" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_MODULE_ID">@[$Package::V_MODULE_ID]</Variable>
        <Variable Name="V_MODULE_INSTANCE_ID" DataType="Int32" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_MODULE_INSTANCE_ID">@[$Package::V_MODULE_INSTANCE_ID]</Variable>
        <Variable Name="V_MODULE_INSTANCE_START_DATETIME" DataType="DateTime" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_MODULE_INSTANCE_START_DATETIME">@[$Package::V_MODULE_INSTANCE_START_DATETIME]</Variable>
        <Variable Name="V_RUN_DATE" DataType="DateTime">1/27/2011 5:06:42 PM</Variable>
        <Variable Name="V_SQL_ROLLBACK_HSTG" DataType="String"></Variable>
        <Variable Name="V_SQL_ROLLBACK_INT_Delete" DataType="String"></Variable>
        <Variable Name="V_SQL_ROLLBACK_INT_Update" DataType="String"></Variable>
        <Variable Name="V_SQL_ROLLBACK_STG" DataType="String"></Variable>
        <Variable Name="V_SQL_ROLLBACK_STG_SOURCE_CONTROL" DataType="String"></Variable>
        <Variable Name="V_TABLE_CODE" DataType="String" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_TABLE_CODE">@[$Package::V_TABLE_CODE]</Variable>
      </Variables>
      
      <Tasks>
        <Container Name="Module Eval">
            
          <Annotations>
            <Annotation AnnotationType="Description">Module Evaluation</Annotation>
          </Annotations>
          
          <Variables>
            <Variable Name="V_CONNECTION_STRING_HELPER" DataType="String"></Variable>
            <Variable Name="V_CONNECTION_STRING_INTPR" DataType="String"></Variable>
            <Variable Name="V_CONNECTION_STRING_PRES" DataType="String"></Variable>
            <Variable Name="V_INACTIVE_INDICATOR_MODULE_LEVEL" DataType="String"></Variable>
          </Variables>
          
          <Tasks>
              
            <ExecuteSQL Name="EST - Check for multiple active Module Instances" FailPackageOnFailure="true" ConnectionName="DIRECT" ResultSet="SingleRow">
              <Annotations>
                <Annotation AnnotationType="Description">Multiple active instances indicate corruption in the OMD repository</Annotation>
              </Annotations>
              <Results>
                <Result Name="ModuleActiveInstanceControl" VariableName="User.V_MODULE_ACTIVE_INSTANCE_CONTROL" />
              </Results>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_MODULE_INSTANCE_ID" Length="-1" DataType="Int32" />
                <Parameter Name="1" VariableName="User.V_MODULE_ID" Length="-1" DataType="Int32" />
                <Parameter Name="2" VariableName="User.V_MODULE_ID" Length="-1" DataType="Int32" />
                <Parameter Name="3" VariableName="User.V_MODULE_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>
                    SELECT
                    	CASE	
                    		WHEN ActiveInstancesCount IS NULL THEN 'Process'
                    		WHEN ActiveInstancesCount IS NOT NULL AND MinimumInstance= ? THEN 'Process'
                    		ELSE 'Abort'
                    	END AS ModuleActiveInstanceControl
                    FROM 
                    (
                       SELECT MODULE_ID, MIN(MODULE_INSTANCE_ID) as MinimumInstance
                       FROM omd.MODULE_INSTANCE
                       WHERE EXECUTION_STATUS_CODE = 'E' 
                         AND MODULE_ID = ? 
                       GROUP BY MODULE_ID
                      -- Check for the lowest instance of the Module Instances since the process must continue if it's the first of the started instances for the particular Module.
                    ) MininumInstance
                    LEFT OUTER JOIN
                    (
                       SELECT MODULE_ID, COUNT(*) as ActiveInstancesCount 
                       FROM omd.MODULE_INSTANCE
                       WHERE EXECUTION_STATUS_CODE = 'E' 
                         AND MODULE_ID = ?
                         AND MODULE_INSTANCE_ID &lt;&gt; ?
                       GROUP BY MODULE_ID
                       -- Check if there are no additional running instances other than the current Module Instance
                    )  ActiveInstances ON ActiveInstances.MODULE_ID=MininumInstance.MODULE_ID
               </DirectInput>
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Set the Processing Indicator to signal Abort of the run" ConnectionName="DIRECT">
                
              <Annotations>
                <Annotation AnnotationType="Description">The default value for the Processing Indicator is 'A' so the action to update the Processing Indicator is effectively redundant, but kept here in the Module Evaluation as a safety check.</Annotation>
              </Annotations>
              
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Check for multiple active Module Instances.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_MODULE_ACTIVE_INSTANCE_CONTROL == &quot;Abort&quot;" SsisName="Constraint" />
                  <Input OutputPathName="EST - Validate Batch processing.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_BATCH_INSTANCE_ID != 0 &amp;&amp; @V_BATCH_VALIDATION == &quot;Incorrect&quot;" SsisName="Constraint 15" />
                </Inputs>
              </PrecedenceConstraints>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_MODULE_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>UPDATE omd.MODULE_INSTANCE set PROCESSING_INDICATOR = 'A' WHERE MODULE_INSTANCE_ID = ?</DirectInput>
            </ExecuteSQL>  
            
            
            <ExecuteSQL Name="EST - Validate Batch processing" ConnectionName="DIRECT" ResultSet="SingleRow">
              <Annotations>
                <Annotation AnnotationType="Description">In case the Module is called from a parent Batch this task verifies if the administration is done properly and if the Module is disabled as part of the Batch configuration (BATCH_MODULE).</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Check for multiple active Module Instances.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_MODULE_ACTIVE_INSTANCE_CONTROL == &quot;Process&quot;" SsisName="Constraint 1" />
                </Inputs>
              </PrecedenceConstraints>
              <Results>
                <Result Name="INACTIVE_INDICATOR" VariableName="User.V_INACTIVE_INDICATOR_BATCH_MODULE_LEVEL" />
                <Result Name="BATCH_VALIDATION" VariableName="User.V_BATCH_VALIDATION" />
              </Results>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
                <Parameter Name="1" VariableName="User.V_MODULE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>
                    SELECT 
                    	Min(INACTIVE_INDICATOR) as INACTIVE_INDICATOR,
                    	CASE
                    		WHEN Min(BATCH_ID) IS NULL THEN 'Incorrect'
                    		ELSE 'Correct'
                    	END as BATCH_VALIDATION
                    	-- The Batch validation is used to Abort a run if the omd.BATCH_MODULE table is not used correctly
                    	-- In this scenario you expect a record to be returned if the Module is run from a Batch (i.e. there's a valid Batch Instance).
                    FROM (
                    SELECT BATCH_ID, MODULE_ID, INACTIVE_INDICATOR
                    FROM omd.BATCH_MODULE
                    WHERE BATCH_ID= ? AND MODULE_ID = ?
                    UNION ALL -- return if there is nothing, to give at least a result for SSIS
                    SELECT null, null, null
                    ) sub
			  </DirectInput>
            </ExecuteSQL>  
            
            
            <ExecuteSQL Name="EST - Get the details of the previous Module Instance" ConnectionName="DIRECT" ResultSet="SingleRow">
                
              <Annotations>
                <Annotation AnnotationType="Description">This task retrieves the execution information from the last time the same Module was run, to understand if any reprocessing is required.</Annotation>
              </Annotations>
              
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Validate Batch processing.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_BATCH_INSTANCE_ID == 0 || (@V_BATCH_INSTANCE_ID != 0 &amp;&amp; @V_BATCH_VALIDATION == &quot;Correct&quot; &amp;&amp; @V_INACTIVE_INDICATOR_BATCH_MODULE_LEVEL != &quot;Y&quot;)" SsisName="Constraint 16" />
                </Inputs>
              </PrecedenceConstraints>
              <Results>
                <Result Name="0" VariableName="User.V_LAST_BATCH_INSTANCE_ID" />
                <Result Name="1" VariableName="User.V_LAST_MODULE_INSTANCE_ID" />
                <Result Name="2" VariableName="User.V_LAST_START_DATETIME" />
                <Result Name="3" VariableName="User.V_LAST_END_DATETIME" />
                <Result Name="4" VariableName="User.V_LAST_EXECUTION_STATUS_CODE" />
                <Result Name="5" VariableName="User.V_LAST_NEXT_RUN_INDICATOR" />
                <Result Name="6" VariableName="User.V_LAST_MODULE_INSTANCE_ID_LIST" />
                <Result Name="7" VariableName="User.V_INACTIVE_INDICATOR_MODULE_LEVEL" />
              </Results>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_MODULE_ID" Length="-1" DataType="Int32" />
                <Parameter Name="1" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>
                    DECLARE @MODULE_ID INT = ?
                    DECLARE @BATCH_ID INT = ? -- zero 0 if it is not executed by a batch
                    
                    SELECT 
                             IsNull(Max(LastBatchInstanceID),-1)              AS 'LastBatchInstanceID'
                             ,IsNull(Max(LastModuleInstanceID),-1)            AS 'LastModuleInstanceID'
                             ,IsNull(Max(LastStartDateTime),'1900-01-01')     AS 'LastStartTime'
                             ,Max(LastEndDateTime)                            AS 'LastEndTime'
                             ,IsNull(Max(LastExecutionStatus),'I')            AS 'LastExecutionStatus'
                             ,IsNull(Max(LastNextRunIndicator),'P')           AS 'LastNextExecutionFlag'
                             ,ISNULL(Max(LastModuleInstanceIDList),'-1')      AS 'LastModuleInstanceIDList'
                             ,(SELECT INACTIVE_INDICATOR FROM omd.MODULE WHERE MODULE_ID = @MODULE_ID) AS InactiveIndicator
                    FROM
                    (
                            (
                    				
                    			SELECT 
                                        A.BATCH_INSTANCE_ID        AS 'LastBatchInstanceID', 
                                        A.MODULE_INSTANCE_ID       AS 'LastModuleInstanceID', 
                                        A.START_DATETIME           AS 'LastStartDateTime',
                                        A.END_DATETIME             AS 'LastEndDateTime',
                                        A.EXECUTION_STATUS_CODE    AS 'LastExecutionStatus', 
                                        A.NEXT_RUN_INDICATOR       AS 'LastNextRunIndicator',
                                        (SELECT Cast(
                    					             '(' + 
                    								 STUFF
                    								 (
                                                           (
                    										   Select ',' + CAST(MODULE_INSTANCE_ID AS VARCHAR(20))
                    										   From  omd.MODULE_INSTANCE MI
                    										         LEFT JOIN omd.BATCH_INSTANCE BI
                    												 ON MI.BATCH_INSTANCE_ID = BI.BATCH_INSTANCE_ID
                    										   Where MI.MODULE_ID = @MODULE_ID
                    										         AND ISNULL(BI.BATCH_ID, 0) = @BATCH_ID --only instance from the same batch / 0
                    												 AND MI.MODULE_INSTANCE_ID &gt;
                    												 (
                    													-- Find the last successful module run/batch run depending on if it is executed by a batch or not
                    													SELECT ISNULL(MAX(MODULE_INSTANCE_ID),0) 
                    												      FROM omd.MODULE_INSTANCE SUB_MI
                    														   LEFT JOIN omd.BATCH_INSTANCE SUB_BI
                    														   ON SUB_MI.BATCH_INSTANCE_ID = SUB_BI.BATCH_INSTANCE_ID
                    												     WHERE SUB_MI.MODULE_ID=@MODULE_ID 														       
                    														   AND ISNULL(SUB_BI.BATCH_ID, 0) = @BATCH_ID --only instance from the same batch / 0
                    														   AND 
                    														   (
                    															    (
                    																    --last successful module run without a batch
                    																	@BATCH_ID = 0
                    																	AND SUB_MI.EXECUTION_STATUS_CODE='S' 
                    																	AND SUB_MI.NEXT_RUN_INDICATOR = 'P'
                    																)
                    																OR
                    																(
                    																   --last successful batch run
                    																	@BATCH_ID &lt;&gt; 0
                    																	AND SUB_BI.EXECUTION_STATUS_CODE='S' 
                    																) 
                    														   )
                    												 )
                    												AND MI.EXECUTION_STATUS_CODE&lt;&gt;'E'
                    												FOR XML PATH ('')  -- convert list module id to single variable
                    									   )
                    									   ,1,1,''
                                                      ) 
                    								  + ')' as varchar(500)
                    								 )
                    					) AS 'LastModuleInstanceIDList'
                    
                                  FROM omd.MODULE_INSTANCE A
                    
                                 WHERE A.MODULE_INSTANCE_ID = 
                                       (
                                            (
                    						  select max(MODULE_INSTANCE_ID) 
                                                from omd.MODULE_INSTANCE WMI
                    							     LEFT JOIN omd.BATCH_INSTANCE WBI
                    								 ON WMI.BATCH_INSTANCE_ID = WBI.BATCH_INSTANCE_ID
                                               where WMI.MODULE_ID = @MODULE_ID 
                    						         AND WMI.EXECUTION_STATUS_CODE &lt;&gt; 'E'
                    								 AND ISNULL(WBI.BATCH_ID, 0) = @BATCH_ID --only instance from the same batch / 0
                    						)                
                                       )
                           )
                           
                    	   UNION ALL -- return if there is nothing, to give at least a result for SSIS
                           
                    	   SELECT Null, Null, Null, Null, Null, Null,Null
                    ) as sub1
			  </DirectInput>
            </ExecuteSQL>     
            
            
            <ExecuteSQL Name="EST - Set the Processing Indicator to Skip this run" ConnectionName="DIRECT">
              <Annotations>
                <Annotation AnnotationType="Description">The Module Instance is skipped ('Cancelled') if the module was started from a Batch, but isn't registered as such. Also, if either the Module Inactive Indicator or the Batch/Module level Inactive Indicator are set to 'Y'.</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Validate Batch processing.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_BATCH_INSTANCE_ID != 0 &amp;&amp; @V_BATCH_VALIDATION == &quot;Correct&quot; &amp;&amp; @V_INACTIVE_INDICATOR_BATCH_MODULE_LEVEL == &quot;Y&quot;" SsisName="Constraint 17" />
                  <Input OutputPathName="EST - Get the details of the previous Module Instance.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_LAST_NEXT_RUN_INDICATOR == &quot;C&quot; || @V_INACTIVE_INDICATOR_MODULE_LEVEL == &quot;Y&quot;" SsisName="Constraint 4" />
                </Inputs>
              </PrecedenceConstraints>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_MODULE_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>UPDATE omd.MODULE_INSTANCE set PROCESSING_INDICATOR = 'C'  WHERE MODULE_INSTANCE_ID = ?</DirectInput>
            </ExecuteSQL>            
            
            
            <ExecuteSQL Name="EST - Set the Processing Indicator to Proceed" ConnectionName="DIRECT">
                
              <Annotations>
                <Annotation AnnotationType="Description">Flag the execution of the Module as OK to proceed (Processing Indicator = 'P').</Annotation>
              </Annotations>
              
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Get the details of the previous Module Instance.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_LAST_NEXT_RUN_INDICATOR == &quot;P&quot; &amp;&amp; @V_INACTIVE_INDICATOR_MODULE_LEVEL != &quot;Y&quot;" SsisName="Constraint 3" />
                </Inputs>
              </PrecedenceConstraints>
              
              <Parameters>
                <Parameter Name="0" VariableName="User.V_MODULE_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              
              <DirectInput>UPDATE omd.MODULE_INSTANCE set PROCESSING_INDICATOR = 'P' WHERE MODULE_INSTANCE_ID = ?</DirectInput>
            </ExecuteSQL>            
            
            
            <ExecuteSQL Name="EST - Correct OMD Source Control" ConnectionName="DIRECT">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Re-process STG.Output" SsisName="Constraint 8" />
                </Inputs>
              </PrecedenceConstraints>
              <VariableInput VariableName="User.V_SQL_ROLLBACK_STG_SOURCE_CONTROL" />
            </ExecuteSQL>

            
            <ExecuteSQL Name="EST - Re-process HSTG"  ConnectionName="HSTG">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Set Processing Indicator to Recovery.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_AREA_CODE == &quot;HSTG&quot;" SsisName="Constraint 10" />
                </Inputs>
              </PrecedenceConstraints>
              <VariableInput VariableName="User.V_SQL_ROLLBACK_HSTG" />
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Re-process INT Delete" ConnectionName="INT">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Set Processing Indicator to Recovery.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_AREA_CODE == &quot;INT&quot;" SsisName="Constraint 13" />
                </Inputs>
              </PrecedenceConstraints>
              <VariableInput VariableName="User.V_SQL_ROLLBACK_INT_Delete" />
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Re-process INT Update" ConnectionName="INT">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Re-process INT Delete.Output" EvaluationOperation="ExpressionAndConstraint" Expression="(SUBSTRING(@V_TABLE_CODE,1,3) == &quot;SAT&quot;) || (SUBSTRING(@V_TABLE_CODE,1,8) ==&quot;LSAT&quot;)" SsisName="Constraint 7" />
                </Inputs>
              </PrecedenceConstraints>
              <VariableInput VariableName="User.V_SQL_ROLLBACK_INT_Update" />
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Re-process STG" ConnectionName="STG">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Set Processing Indicator to Recovery.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_AREA_CODE == &quot;STG&quot;" SsisName="Constraint 5" />
                </Inputs>
              </PrecedenceConstraints>
              <VariableInput VariableName="User.V_SQL_ROLLBACK_STG" />
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Set Processing Indicator to Recovery" ConnectionName="DIRECT">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="SCT - Prepare Dynamic SQL statements.Output" SsisName="Constraint 6" />
                </Inputs>
              </PrecedenceConstraints>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_MODULE_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>UPDATE omd.MODULE_INSTANCE set PROCESSING_INDICATOR = 'R'  WHERE MODULE_INSTANCE_ID = ?</DirectInput>
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Set the current Processing Indicator to Proceed" ConnectionName="DIRECT">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Re-process HSTG.Output" SsisName="Constraint 11" />
                  <Input OutputPathName="EST - Correct OMD Source Control.Output" SsisName="Constraint 12" />
                  <Input OutputPathName="EST - Re-process INT Delete.Output" SsisName="Constraint 14" />
                  <Input OutputPathName="EST - Set Processing Indicator to Recovery.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_AREA_CODE == &quot;REP&quot;" SsisName="Constraint 18" />
                  <Input OutputPathName="EST - Re-process INT Update.Output" SsisName="Constraint 9" />
                </Inputs>
              </PrecedenceConstraints>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_MODULE_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>UPDATE omd.MODULE_INSTANCE set PROCESSING_INDICATOR = 'P' WHERE MODULE_INSTANCE_ID = ?</DirectInput>
            </ExecuteSQL>
            

            <Script Name="SCT - Prepare Dynamic SQL statements">
              <Annotations>
                <Annotation AnnotationType="Description">This task prepares the dynamic SQL statements that are required for various rollback processes.</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Get the details of the previous Module Instance.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_LAST_NEXT_RUN_INDICATOR  == &quot;R&quot; &amp;&amp; @V_INACTIVE_INDICATOR_MODULE_LEVEL != &quot;Y&quot;" SsisName="Constraint 2" />
                </Inputs>
              </PrecedenceConstraints>
              <ScriptTaskProjectReference ScriptTaskProjectName="Module Evaluation Script Task Project" />
            </Script>
                
          </Tasks>
        </Container>
      </Tasks>
      
      <Parameters>
        <Parameter Name="V_AREA_CODE" DataType="String"></Parameter>
        <Parameter Name="V_BATCH_ID" DataType="Int32">0</Parameter>
        <Parameter Name="V_BATCH_INSTANCE_ID" DataType="Int32">0</Parameter>
        <Parameter Name="V_MODULE_ID" DataType="Int32">0</Parameter>
        <Parameter Name="V_MODULE_INSTANCE_ID" DataType="Int32">0</Parameter>
        <Parameter Name="V_MODULE_INSTANCE_START_DATETIME" DataType="DateTime">2/11/2014 9:25:08 AM</Parameter>
        <Parameter Name="V_TABLE_CODE" DataType="String"></Parameter>
      </Parameters>
    </Package>
 