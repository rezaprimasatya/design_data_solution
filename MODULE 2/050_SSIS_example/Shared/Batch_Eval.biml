
    <Package Name="Batch_Eval">
        
      <Annotations>
        <Annotation AnnotationType="Description">Evaluate the processing of a Batch Instance.</Annotation>
      </Annotations>   
        
      <Variables>
          <Variable Name="V_BATCH_ID" DataType="Int32" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_BATCH_ID">@[$Package::V_BATCH_ID]</Variable>
          <Variable Name="V_BATCH_INSTANCE_ID" DataType="Int32" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_BATCH_INSTANCE_ID">@[$Package::V_BATCH_INSTANCE_ID]</Variable>
          <Variable Name="V_BATCH_INSTANCE_START_DATETIME" DataType="DateTime" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_BATCH_INSTANCE_START_DATETIME">@[$Package::V_BATCH_INSTANCE_START_DATETIME]</Variable>
		  <Variable Name="V_BATCH_INSTANCE_STATUS_CODE" DataType="String"></Variable>
          <Variable Name="V_FREQUENCY_CODE" DataType="String" EvaluateAsExpression="true" InheritFromPackageParentConfigurationString="V_FREQUENCY_CODE">@[$Package::V_FREQUENCY_CODE]</Variable>
          <Variable Name="V_INACTIVE_INDICATOR" DataType="String"></Variable>
          <Variable Name="V_PACKAGE_EXECUTION_GUID" DataType="String"></Variable>
          <Variable Name="V_SQL_MODULE_ROLLBACK_FULL" DataType="String"></Variable>
      </Variables>

      <Tasks>
        <Container Name="Batch Eval">
            
          <Annotations>
            <Annotation AnnotationType="Description">Batch Evaluation</Annotation>
          </Annotations>
          
          <Variables>
            <Variable Name="V_ACTIVE_BATCH_INSTANCES_COUNT" DataType="Int32">0</Variable>
            <Variable Name="V_BATCH_ID_LIST" DataType="String"></Variable>
            <Variable Name="V_LAST_EXECUTION_STATUS_CODE" DataType="String"></Variable>
            <Variable Name="V_LAST_NEXT_RUN_INDICATOR" DataType="String"></Variable>
            <Variable Name="V_SQL_MODULE_ROLLBACK_PARTIAL" DataType="String"></Variable>
          </Variables>
          
          <Tasks>
              
            <ExecuteSQL Name="EST - Check for multiple active Batch Instances" FailPackageOnFailure="true" ConnectionName="DIRECT" ResultSet="SingleRow">
              <Annotations>
                <Annotation AnnotationType="Description">Multiple active instances indicate corruption in the OMD repository.</Annotation>
              </Annotations>
              
              <Results>
                <Result Name="ActiveInstancesCount" VariableName="User.V_ACTIVE_BATCH_INSTANCES_COUNT" />
              </Results>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
                <Parameter Name="1" VariableName="User.V_BATCH_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>
                    SELECT COUNT(*) as ActiveInstancesCount FROM omd.BATCH_INSTANCE 
                    WHERE EXECUTION_STATUS_CODE = 'E' 
                    and BATCH_ID = ? and BATCH_INSTANCE_ID &lt; ?
            </DirectInput>
            </ExecuteSQL>
            
            <ExecuteSQL Name="EST - Get Previous Batch Instance ID List" FailPackageOnFailure="true" ConnectionName="DIRECT" ResultSet="SingleRow">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Get the Next Run Indicator and Execution Status Code from the previous Batch Instance.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_LAST_EXECUTION_STATUS_CODE==&quot;F&quot; &amp;&amp; @V_LAST_NEXT_RUN_INDICATOR != &quot;C&quot; || @V_LAST_NEXT_RUN_INDICATOR==&quot;R&quot;" SsisName="Constraint 4" />
                </Inputs>
              </PrecedenceConstraints>
              <Results>
                <Result Name="BATCH_ID_LIST" VariableName="User.V_BATCH_ID_LIST" />
              </Results>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
                <Parameter Name="1" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
                <Parameter Name="2" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>SELECT Cast('(' + STUFF
                    (
                     (SELECT ',' + CAST(BATCH_INSTANCE_ID AS VARCHAR(20))
                     FROM omd.BATCH_INSTANCE 
                     WHERE  BATCH_ID = ?
                     AND (
                       BATCH_INSTANCE_ID &gt; (SELECT MAX(BATCH_INSTANCE_ID) FROM omd.BATCH_INSTANCE WHERE BATCH_ID = ? AND (EXECUTION_STATUS_CODE='S' AND NEXT_RUN_INDICATOR = 'P'))
                       OR (SELECT COUNT(BATCH_INSTANCE_ID) FROM omd.BATCH_INSTANCE WHERE BATCH_ID = ? AND (EXECUTION_STATUS_CODE='S' AND NEXT_RUN_INDICATOR = 'P')) = 0
                       )
                     AND EXECUTION_STATUS_CODE&lt;&gt;'E'
                     Order By BATCH_INSTANCE_ID 
                     FOR XML PATH ('')
                     ),1,1,''
                    ) + ')' as varchar(4000)) AS 'BATCH_ID_LIST'
                </DirectInput>
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Get the Batch Execution Status Code" FailPackageOnFailure="true" ConnectionName="DIRECT" ResultSet="SingleRow">
              <Annotations>
                <Annotation AnnotationType="Description">Verifies that there is a (new) Batch Instance running (Execution Status Code ='E'). If there is nothing running initialisation has not worked succesfully (Create Batch Instance) and processing must halt. This is done by evaluating the 'X' for the Execution Status Code.</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Check for multiple active Batch Instances.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_ACTIVE_BATCH_INSTANCES_COUNT == 0" SsisName="Constraint" />
                </Inputs>
              </PrecedenceConstraints>
              <Results>
                <Result Name="EXECUTION_STATUS_CODE" VariableName="User.V_BATCH_INSTANCE_STATUS_CODE" />
              </Results>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>SELECT DISTINCT ISNULL (
                   (
                    SELECT DISTINCT EXECUTION_STATUS_CODE as EXECUTION_STATUS_CODE 
                    FROM omd.BATCH_INSTANCE 
                    WHERE EXECUTION_STATUS_CODE = 'E' 
                      AND BATCH_ID= ?
                    ) 
                    ,'X') AS EXECUTION_STATUS_CODE 
                FROM omd.BATCH
                </DirectInput>
            </ExecuteSQL>
            
            <ExecuteSQL Name="EST - Get the Inactive Indicator from the Batch details" FailPackageOnFailure="true" ConnectionName="DIRECT" ResultSet="SingleRow">
              <Annotations>
                <Annotation AnnotationType="Description">The Next Run Indicator is retrieved from the previous Batch Instance.</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Get the Batch Execution Status Code.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_BATCH_INSTANCE_STATUS_CODE == &quot;E&quot;" SsisName="Constraint 1" />
                </Inputs>
              </PrecedenceConstraints>
              <Results>
                <Result Name="INACTIVE_INDICATOR" VariableName="User.V_INACTIVE_INDICATOR" />
              </Results>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
              </Parameters>
                <DirectInput>
                    SELECT DISTINCT INACTIVE_INDICATOR
                    FROM omd.BATCH
                    WHERE BATCH_ID= ?
                </DirectInput>
            </ExecuteSQL>
            
            <ExecuteSQL Name="EST - Get the Next Run Indicator and Execution Status Code from the previous Batch Instance" FailPackageOnFailure="true" Id="366372ec-5e48-49b7-a303-cbefc08d3dee" ConnectionName="DIRECT" ResultSet="SingleRow">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Get the Inactive Indicator from the Batch details.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_INACTIVE_INDICATOR != &quot;Y&quot;" SsisName="Constraint 12" />
                </Inputs>
              </PrecedenceConstraints>
              <Results>
                <Result Name="NEXT_RUN_INDICATOR" VariableName="User.V_LAST_NEXT_RUN_INDICATOR" />
                <Result Name="EXECUTION_STATUS_CODE" VariableName="User.V_LAST_EXECUTION_STATUS_CODE" />
              </Results>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
                <Parameter Name="1" VariableName="User.V_BATCH_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>
                  SELECT 
                       ISNULL(MAX(A.NEXT_RUN_INDICATOR),'P') AS NEXT_RUN_INDICATOR,
                       ISNULL(MAX(A.EXECUTION_STATUS_CODE),'S') AS EXECUTION_STATUS_CODE
                    FROM
                     (
                     SELECT 
                            NEXT_RUN_INDICATOR, 
                            EXECUTION_STATUS_CODE
                     FROM omd.BATCH_INSTANCE 
                     WHERE BATCH_ID =  ? AND END_DATETIME = (select MAX(END_DATETIME) from omd.BATCH_INSTANCE where BATCH_ID = ?)
                     )A
                </DirectInput>
            </ExecuteSQL>
            
            <ExecuteSQL Name="EST - Set all related Module Instances to Failure and Recovery" FailPackageOnFailure="true" ConnectionName="DIRECT">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="SCT - Prepare Module Rollback SQL.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_LAST_NEXT_RUN_INDICATOR==&quot;R&quot;" SsisName="Constraint 9" />
                </Inputs>
              </PrecedenceConstraints>
              <VariableInput VariableName="User.V_SQL_MODULE_ROLLBACK_FULL" />
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Set the current Processing Indicator to Proceed" ConnectionName="DIRECT">
              <Annotations>
                <Annotation AnnotationType="Description">When a Batch Instance is in recovery by default all Modules that have previously been completed are set to skip/cancel (NEXT_RUN_INDICATOR ="C"). Through a manual override the administrator can trigger a full reload of the Batch Instance by setting the NEXT_RUN_INDICATOR to "R" on Batch level.This will trigger an update to set the NEXT_RUN_INDICATOR to "R" on Module level for all corresponding Modules.</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Skip Modules that have succesfully completed in the failed Batch Instance.Output" SsisName="Constraint 14" />
                  <Input OutputPathName="EST - Get the Next Run Indicator and Execution Status Code from the previous Batch Instance.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_LAST_EXECUTION_STATUS_CODE!=&quot;F&quot; &amp;&amp; @V_LAST_NEXT_RUN_INDICATOR != &quot;C&quot; &amp;&amp; @V_LAST_NEXT_RUN_INDICATOR!=&quot;R&quot;" SsisName="NormalRun" />
                  <Input OutputPathName="EST - Set all related Module Instances to Failure and Recovery.Output" SsisName="Constraint 6" />
                </Inputs>
              </PrecedenceConstraints>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_BATCH_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>UPDATE omd.BATCH_INSTANCE set PROCESSING_INDICATOR = 'P' WHERE BATCH_INSTANCE_ID = ?</DirectInput>
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Set the Processing Indicator to signal Abort of the run" ConnectionName="DIRECT">
              <Annotations>
                <Annotation AnnotationType="Description">The default value for the Processing Indicator is 'A' so the action to update the Processing Indicator is effectively redundant but kept in the evaluation as a safety catch.</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Check for multiple active Batch Instances.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_ACTIVE_BATCH_INSTANCES_COUNT &gt; 0" SsisName="Constraint 8" />
                </Inputs>
              </PrecedenceConstraints>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_BATCH_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>UPDATE omd.BATCH_INSTANCE set PROCESSING_INDICATOR = 'A' WHERE BATCH_INSTANCE_ID = ?</DirectInput>
            </ExecuteSQL>
            
            
            <ExecuteSQL Name="EST - Set the Processing Indicator to Skip this run" ConnectionName="DIRECT">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Get the Inactive Indicator from the Batch details.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_INACTIVE_INDICATOR == &quot;Y&quot;" SsisName="Constraint 11" />
                  <Input OutputPathName="EST - Get the Next Run Indicator and Execution Status Code from the previous Batch Instance.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_LAST_NEXT_RUN_INDICATOR == &quot;C&quot;" SsisName="Constraint 2" />
                </Inputs>
              </PrecedenceConstraints>
              <Parameters>
                <Parameter Name="0" VariableName="User.V_BATCH_INSTANCE_ID" Length="-1" DataType="Int32" />
              </Parameters>
              <DirectInput>UPDATE omd.BATCH_INSTANCE set PROCESSING_INDICATOR = 'C'  WHERE BATCH_INSTANCE_ID = ?</DirectInput>
            </ExecuteSQL>
            
            <ExecuteSQL Name="EST - Skip Modules that have succesfully completed in the failed Batch Instance" FailPackageOnFailure="true" ConnectionName="DIRECT">
              <Annotations>
                <Annotation AnnotationType="Description">Execute SQL Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="SCT - Prepare Module Rollback SQL.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@V_LAST_NEXT_RUN_INDICATOR==&quot;P&quot;" SsisName="Constraint 13" />
                </Inputs>
              </PrecedenceConstraints>
              <VariableInput VariableName="User.V_SQL_MODULE_ROLLBACK_PARTIAL" />
            </ExecuteSQL>
            
            <Script Name="SCT - Failed Check, Raise Error">
              <Annotations>
                <Annotation AnnotationType="Description">The 'E' value indicates that there has been no previous failure and the Batch is not running. If the code is different processing will stop here and the processing will trigger an error (RaiseError).</Annotation>
              </Annotations>
              
              <PrecedenceConstraints LogicalType="Or">
                <Inputs>
                  <Input OutputPathName="EST - Get the Batch Execution Status Code.Output" EvaluationOperation="ExpressionAndConstraint"  Expression="@V_BATCH_INSTANCE_STATUS_CODE != &quot;E&quot;" SsisName="Constraint 10" />
                </Inputs>
              </PrecedenceConstraints>
              <ScriptTaskProjectReference ScriptTaskProjectName="Batch Evaluation RaiseError Script Task Project" />
            </Script>
            
            <Script Name="SCT - Prepare Module Rollback SQL">
              <Annotations>
                <Annotation AnnotationType="Description">Script Task</Annotation>
              </Annotations>
              <PrecedenceConstraints LogicalType="And">
                <Inputs>
                  <Input OutputPathName="EST - Get Previous Batch Instance ID List.Output" SsisName="Constraint 5" />
                </Inputs>
              </PrecedenceConstraints>
              <ScriptTaskProjectReference ScriptTaskProjectName="Batch Evaluation Rollback Script Task Project" />
            </Script>
                
          </Tasks>
        </Container>
      </Tasks>
      <Parameters>
        <Parameter Name="V_BATCH_ID" DataType="Int32">0</Parameter>
        <Parameter Name="V_BATCH_INSTANCE_ID" DataType="Int32">0</Parameter>
        <Parameter Name="V_BATCH_INSTANCE_START_DATETIME" DataType="DateTime">2/11/2014 9:34:46 AM</Parameter>
        <Parameter Name="V_FREQUENCY_CODE" DataType="String"></Parameter>
      </Parameters>
    </Package>
